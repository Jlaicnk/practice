"""
Django settings for vue_django_KnGraph project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import datetime
from drf_spectacular.contrib import rest_auth

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-eufhixl7_h3+szw%p$w3md=uemxg2*9q$$-(1b*=bgvqxzn4v9"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['10.200.136.105','10.201.82.193']
# ALLOWED_HOSTS = ['10.201.82.193']
CORS_ORIGIN_ALLOW_ALL=True #前后端跨域


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "KnGraph.apps.KngraphConfig",
    "drf_spectacular",
    "corsheaders",
    "Users.apps.UsersConfig"
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

ROOT_URLCONF = "vue_django_KnGraph.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "vue_django_KnGraph.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'db_knGraph',
        'USER': 'root',
        'PASSWORD': '2206040208',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# 定义静态文件的根目录路径，Django在运行 collectstatic 命令时会将所有静态文件收集到这个目录
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# # 定义一个列表，包含开发环境中的静态文件目录路径    #不会用
# # 这些目录中的静态文件不会被 collectstatic 命令收集，但在开发服务器运行时会被提供服务
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),
# ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

# 定义静态文件的根目录路径，Django在运行 collectstatic 命令时会将所有静态文件收集到这个目录
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# # 定义一个列表，包含开发环境中的静态文件目录路径
# # 这些目录中的静态文件不会被 collectstatic 命令收集，但在开发服务器运行时会被提供服务
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),
# ]

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#DRF全局设置
REST_FRAMEWORK = {
    #API文档方案
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

    # 设置默认的分页类为 PageNumberPagination
    # PageNumberPagination 通过请求参数 page 和 page_size 进行分页
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',

    # 设置每页显示的默认条目数为 50
    'PAGE_SIZE': 50,

    # 设置日期时间格式为 "年-月-日 时:分:秒"
    # 例如：2023-10-05 14:30:20
    'DATETIME_FORMAT': "%Y-%m-%d %H:%M:%S",

    # 设置默认的渲染器类列表
    # JSONRenderer 用于将响应渲染为 JSON 格式
    # BrowsableAPIRenderer 用于在浏览器中提供可浏览的 API 界面
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],

    # 设置默认的解析器类列表
    # JSONParser 用于解析 JSON 格式的请求体
    # FormParser 用于解析表单数据
    # MultiPartParser 用于解析文件上传等多部分数据
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],

    # 设置默认的权限类列表
    # IsAuthenticated 权限类要求用户必须通过身份验证才能访问 API
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

    # 设置默认的身份验证类列表
    # BaseAuthentication 是基类，通常不需要直接使用
    # SessionAuthentication 使用 Django 的会话机制进行身份验证
    # TokenAuthentication 使用 Token 进行身份验证，通常需要安装 `djangorestframework.authtoken`
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}
AUTH_USER_MODEL = 'Users.SysUser'
# 确保媒体文件配置正确
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
SIMPLE_JWT = {
    # token 有效时长（返回的 access 有效时长）
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=30),
    # token 刷新的有效时间（返回的 refresh 有效时长）
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(seconds=20),
}

